package com.example.passwordgenerator;

import com.example.passwordgenerator.entity.PasswordEntry;
import com.example.passwordgenerator.service.PasswordEntryService;
import com.example.passwordgenerator.service.PasswordService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.Scanner;

@SpringBootApplication
public class PasswordGeneratorApplication implements CommandLineRunner {

    private final PasswordService passwordService;
    private final PasswordEntryService passwordEntryService;

    public PasswordGeneratorApplication(PasswordService passwordService, PasswordEntryService passwordEntryService) {
        this.passwordService = passwordService;
        this.passwordEntryService = passwordEntryService;
    }

    public static void main(String[] args) {
        SpringApplication.run(PasswordGeneratorApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.println("üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π (–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º) üîê");

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ");
        String owner = scanner.nextLine();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ—Ç 4 –¥–æ 30): ");
        int length = scanner.nextInt();

        System.out.print("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1 - —Ü–∏—Ñ—Ä—ã, 2 - —Ü–∏—Ñ—Ä—ã+–±—É–∫–≤—ã, 3 - —Ü–∏—Ñ—Ä—ã+–±—É–∫–≤—ã+—Å–∏–º–≤–æ–ª—ã): ");
        int complexity = scanner.nextInt();

        if (length < 4 || length > 30) {
            System.out.println("–û—à–∏–±–∫–∞: –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.");
            return;
        }
        if (complexity < 1 || complexity > 3) {
            System.out.println("–û—à–∏–±–∫–∞: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 3.");
            return;
        }

        String password = passwordService.generatePassword(length, complexity);
        PasswordEntry entry = new PasswordEntry(password, owner);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º ID
        entry = passwordEntryService.create(entry);

        System.out.println("\n‚úÖ –í–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: " + password);

        // –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è —Å –ë–î
        System.out.println("\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å –ë–î? (0 - –Ω–µ—Ç, 1 - –¥–∞): ");
        int check = scanner.nextInt();
        if (check == 1) {
            scanner.nextLine(); // –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ nextInt()
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ");
            String checkPassword = scanner.nextLine();
            boolean match = passwordEntryService.verifyPassword(entry.getId(), checkPassword);
            if (match) {
                System.out.println("–ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î.");
            } else {
                System.out.println("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î.");
            }
        } else {
            System.out.println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.");
        }
    }
}